#Include 'totvs.ch'
#Include "topconn.ch"
#Include "FWBrowse.ch"

/*/{Protheus.doc} VirtusOMSA010TabPrecoMigracao
Funcao para migracao de tabela de preco
@type function
@version 1.0
@author g.sampaio
@since 14/03/2024
/*/
User Function VirtusMTabPrecoMigracao()

	Local oDlg          := NIL
	Local oPanelBkg     := NIL
	Local oStepWiz      := NIL
	Local oPnlPlano     := NIL
	Local oBrwPlano     := NIL
	Local oPnlPrd       := NIL
	Local oBrwPrd       := NIL
	Local cRelProc      := ""

	Private nHdlLog       := 0

	//crio dialog que ira receber o Wizard
	DEFINE DIALOG oDlg TITLE 'Assistente de Replicação de Tabela de Preço - Plataforma Virtus' PIXEL STYLE nOR(  WS_VISIBLE ,  WS_POPUP )

	oDlg:nWidth := 800
	oDlg:nHeight := 620

	//crio panel do wizard
	oPanelBkg:= TPanel():New(0,0,"",oDlg,,,,,,300,300)

	oPanelBkg:Align := CONTROL_ALIGN_ALLCLIENT

	//instacio o objeto do wizard
	oStepWiz:= FWWizardControl():New(oPanelBkg)//Instancia a classe FWWizard
	oStepWiz:ActiveUISteps()

	////////////////////////////////////////////////////////
	///crio a pagina 1 do wizard - Instrucoes Iniciais
	///////////////////////////////////////////////////////

	oNewPag := oStepWiz:AddStep("1")

	//Altero a descrição do step
	oNewPag:SetStepDescription("Instrucoes Iniciais")

	//Defino o bloco de construção
	oNewPag:SetConstruction({|Panel|Pag1Intrucoes(Panel)})

	//Defino o bloco ao clicar no botão Próxim
	oNewPag:SetNextAction({||.T.})

	//Defino o bloco ao clicar no botão Cancelar
	oNewPag:SetCancelAction({||oDlg:End()})

	////////////////////////////////////////////////////////
	///crio a pagina 2 do wizard - Planos Cadastrados
	///////////////////////////////////////////////////////

	oNewPag := oStepWiz:AddStep("2")
	oNewPag:SetStepDescription("Tabela de Preços")
	oNewPag:SetConstruction({|oPnlPlano| FwReplica(oPnlPlano,@oBrwPlano,"QDA0")})
	oNewPag:SetNextAction({|| lRet := ValProxTela("QDA0",oBrwPrd) })
	oNewPag:SetCancelAction({||lRet := .F.,oDlg:End()})

	////////////////////////////////////////////////////////
	///crio a pagina 3 do wizard - Servicos do Plano
	///////////////////////////////////////////////////////
	oNewPag := oStepWiz:AddStep("3")
	oNewPag:SetStepDescription("Filial de Destino")
	oNewPag:SetConstruction({|oPnlPrd| FwReplica(oPnlPrd,@oBrwPrd,"QFIL")})
	oNewPag:SetNextAction({|| lRet := ValProxTela("QFIL",oBrwPrd) })
	oNewPag:SetCancelAction({||lRet := .F.,oDlg:End()})

	/////////////////////////////////////////////////////////
	///crio a pagina 5 do wizard - Relatorio do Processamento
	/////////////////////////////////////////////////////////

	oNewPag := oStepWiz:AddStep("4", {|Panel| RelImport(Panel,@cRelProc)})

	//Altero a descrição do step
	oNewPag:SetStepDescription("Log do Processo")

	oNewPag:SetNextAction({|| VldArqRel(@nHdlLog,@cRelProc) })

	//Defino o bloco ao clicar no botão Cancelar
	oNewPag:SetCancelAction({||oDlg:End()})

	/////////////////////////////////////////////////////////
	///crio a pagina 6 do wizard - Processamento da Atualizacao
	/////////////////////////////////////////////////////////

	oNewPag := oStepWiz:AddStep("5", {|Panel| TelaResult(Panel,nHdlLog,cRelProc) })

	//Altero a descrição do step
	oNewPag:SetStepDescription("Resultado")

	oNewPag:SetNextAction({||oDlg:End(),.T.})

	//Defino o bloco ao clicar no botão Cancelar
	oNewPag:SetCancelAction({||.F.})

	oNewPag:SetCancelWhen({||.F.})

	oNewPag:SetPrevAction({||.F.})

	oStepWiz:Activate()

	ACTIVATE DIALOG oDlg CENTER

	oStepWiz:Destroy()

Return(Nil)

/*/{Protheus.doc} CriaPartSup
Cria parte superior do panel do
wizard com a logo e texto explicativo
@type function
@version 1.0
@author g.sampaio
@since 14/03/2024
@param oPanel, object, objeto do poinel da tela
/*/
Static Function CriaPartSup(oPanel)

	Local oSay1 		:= NIL
	Local oSay2 		:= NIL
	Local oSay3 		:= NIL
	Local oLgTotvs		:= NIL
	Local oGroup1		:= NIL
	Local oFnt18		:= TFont():New("Arial",,18,,.T.,,,,,.F.,.F.)
	Local oFnt16		:= TFont():New("Arial",,16,,.F.,,,,,.F.,.F.)
	Local nLarguraPnl	:= oPanel:nClientWidth / 2

//carrego a imagem do repositorio 
	@ 003, 003 REPOSITORY oLgTotvs SIZE 90, 90 OF oPanel PIXEL NOBORDER
	oLgTotvs:LoadBmp("APLOGO.JPG")

	@ 005 , 055 SAY oSay1 PROMPT "Atenção!" SIZE 060, 010 Font oFnt18 OF oPanel COLORS 0, 16777215 PIXEL

	@ 020 , 055 SAY oSay2 PROMPT "Siga atentamente os passos da rotina." SIZE 200, 010 Font oFnt16 OF oPanel COLORS 0, 16777215 PIXEL

	@ 030 , 055 SAY oSay3 PROMPT "Replica de Tabela de Preços - Plataforma Virtus" SIZE 200, 010 Font oFnt16 OF oPanel COLORS 0, 16777215 PIXEL

	@ 040 , 020 GROUP oGroup1 TO 042 , nLarguraPnl - 2 PROMPT "" OF oPanel COLOR 0, 16777215 PIXEL

Return(Nil)

/*/{Protheus.doc} Pag1Intrucoes
Instrucoes Iniciais do Wizard de Atualizacao
@type function
@version 1.0
@author g.sampaio
@since 14/03/2024
@param oPanel, object, objeto do painel da tela
/*/
Static Function Pag1Intrucoes(oPanel)

	Local oSay1 		:= NIL
	Local oFnt18		:= TFont():New("Arial",,18,,.T.,,,,,.F.,.F.)
	Local oFnt16		:= TFont():New("Arial",,16,,.F.,,,,,.F.,.F.)
	Local cPulaLinha	:= Chr(13) + Chr(10)
	Local cTexto1		:= ""

	//crio a parte superior da tela do wizard
	CriaPartSup(oPanel)

	@ 045 , 020 SAY oSay4 PROMPT "Bem Vindo..." SIZE 200, 010 Font oFnt18 OF oPanel COLORS 0, 16777215 PIXEL

	cTexto1 += "Esta rotina tem como objetivo ajuda-lo no processo de replica de tabela de preços."                            + cPulaLinha
	cTexto1 += "Essa atualização consiste em copiar a tabela de preços de uma filial para outra."		+ cPulaLinha

	@ 065 , 020 SAY oSay1 PROMPT cTexto1 SIZE 300, 300 Font oFnt16 OF oPanel COLORS 0, 16777215 PIXEL

Return(Nil)

/*/{Protheus.doc} FwReplica
Funcao para replica de tabela de preco
@type function
@version 1.0 
@author Raphael Martins 
@since 30/06/2020
@param oPanel, object, Panel onde sera criado a grid
@param oBrowse, object, Browse que sera criado
@param cAlias, character, Alias que sera criado
/*/
Static Function FwReplica(oPanel,oBrowse,cAlias)

	Local oBtnPanel := TPanel():New(0,0,"",oPanel,,,,,,40,40)

	oBtnPanel:Align := CONTROL_ALIGN_ALLCLIENT

	//Cria tabela temporaria que vai conter os dADOS
	CriaTabTemp(cAlias)

	// Define o Browse
	oBrowse := FWBrowse():New(oBtnPanel)
	oBrowse:SetDataTable(.T.)
	oBrowse:SetAlias(cAlias)
	oBrowse:DisableReport()

	//##################################################################
	//					        DADOS DO LAYOUT
	//##################################################################

	if cAlias == "QDA0"

		// Cria uma coluna de marca/desmarca
		oColumn := oBrowse:AddMarkColumns({||If( QDA0->DA0_OK == 'T','LBOK','LBNO')},{|oBrowse| MarkBrowse( oBrowse,cAlias,"DA0_OK" ) },{|oBrowse|/* Função de HEADERCLICK*/})

		ADD COLUMN oColumn DATA { || DA0_CODTAB } TITLE Alltrim(GetSx3Cache("DA0_CODTAB","X3_TITULO")) SIZE TamSx3("DA0_CODTAB")[1]   OF oBrowse
		ADD COLUMN oColumn DATA { || DA0_DESCRI } TITLE Alltrim(GetSx3Cache("DA0_DESCRI","X3_TITULO")) SIZE TamSx3("DA0_DESCRI")[1]   OF oBrowse


	elseif cAlias == "QFIL"

		oColumn := oBrowse:AddMarkColumns({||If( QFIL->FIL_OK == 'T','LBOK','LBNO')},{|oBrowse| MarkBrowse( oBrowse,cAlias,"FIL_OK" ) },{|oBrowse|/* Função de HEADERCLICK*/})

		ADD COLUMN oColumn DATA { || FIL_FILIAL } TITLE "Filial"    SIZE TamSx3("DA0_FILIAL")[1]    OF oBrowse
		ADD COLUMN oColumn DATA { || FIL_DESCRI } TITLE "Descrição" SIZE 60                         OF oBrowse

	endif

	oBrowse:SetSeek()
	oBrowse:Activate()

Return(Nil)

/*/{Protheus.doc} CriaTabTemp
Cria tabela temporaria com os planos
@type function
@version 1.0
@author Raphael Martins
@since 30/06/2020
@param cAlias, character, Alias que sera carregado
/*/
Static Function CriaTabTemp(cAlias)

	Local oTable 	:= Nil
	Local aCampos	:= {}
	Local cIndice1	:= ""
	Local cIndice2	:= ""
	Local cIndice3  := ""

	if cAlias == "QDA0"

		aCampos:= {	{"DA0_OK"		,"C",001,0},;
			{"DA0_CODTAB"	,"C",TamSX3("DA0_CODTAB")[1],0},;
			{"DA0_DESCRI" 	,"C",TamSX3("DA0_DESCRI")[1],0} }

		cIndice1 := "DA0_CODTAB"
		cIndice2 := "DA0_OK"
		cIndice3 := "DA0_DESCRI"

	elseif cAlias == "QFIL"

		aCampos:= {	{"FIL_OK"		,"C",001,0},;
			{"FIL_FILIAL"	,"C",TamSX3("DA0_FILIAL")[1],0},;
			{"FIL_DESCRI"	,"C",40,0}}

		cIndice1 := "FIL_FILIAL"
		cIndice2 := "FIL_OK"
		cIndice3 := "FIL_DESCRI"

	endif

	//Valida se ja existe a tabela criada
	if Select(cAlias) > 0
		(cAlias)->(DbCloseArea())
	endif

	oTable:= FWTemporaryTable():New(cAlias)

	//Inserindo campos no alias temporario
	oTable:SetFields(aCampos)

	//---------------------
	//Criação dos índices
	//---------------------
	oTable:AddIndex("01", { cIndice1	} )
	oTable:AddIndex("02", { cIndice2	} )

	//---------------------------------------------------------------
	//tabela criado no espaço temporário do DB
	//---------------------------------------------------------------
	oTable:Create()
	//------------------------------------

	//Carrega dados na tebela temporaria
	GetTabTemp(cAlias)

Return(Nil)

/*/{Protheus.doc} GetTabTemp
Monto a tabela temporaria
@type function
@version 1.0
@author Raphael Martins
@since 30/06/2020
@param cAlias, character, Alias que sera carregado
/*/
Static Function GetTabTemp(cAlias)

	Local aFiliais	As Array
	Local nFilial	As Numeric

	//Pega dados do Plano
	If cAlias == "QDA0"

		cQry := " SELECT "
		cQry += " 	DA0.DA0_CODTAB CODIGO, "
		cQry += " 	DA0.DA0_DESCRI DESCRICAO "
		cQry += " FROM " + RetSQLName("DA0") + " DA0 "
		cQry += " WHERE DA0.D_E_L_E_T_ = ' ' "
		cQry += " 	AND DA0.DA0_FILIAL = '"+ xFilial("DA0") + "' "
		cQry += " ORDER BY DA0.DA0_CODTAB "

		cQry := ChangeQuery(cQry)

		if Select("TRBDA0") > 0
			TRBDA0->(DbCloseArea())
		endif

		MPSysOpenQuery(cQry, "TRBDA0")

		While TRBDA0->(!EOF())

			Reclock("QDA0",.T.)

			QDA0->DA0_OK 		:= " "
			QDA0->DA0_CODTAB		:= TRBDA0->CODIGO
			QDA0->DA0_DESCRI	:= TRBDA0->DESCRICAO

			QDA0->(MsUnLock())

			TRBDA0->(DbSkip())
		EndDo

	else

		// pego os dados das filiais
		aFiliais		:= FWLoadSM0()

		For nFilial := 1 To Len(aFiliais)

			// nao coloco a filial para ser selecionada
			If AllTrim(aFiliais[nFilial, 2]) <> AllTrim(cFilAnt)

				Reclock("QFIL",.T.)

				QFIL->FIL_OK 		:= " "
				QFIL->FIL_FILIAL	:= aFiliais[nFilial, 2]
				QFIL->FIL_DESCRI	:= aFiliais[nFilial, 7]

				QFIL->(MsUnLock())

			EndIf

		Next nFilial

	endif

Return(Nil)

/*/{Protheus.doc} MarkBrowse
Monto o markbrowse
@type function
@version 1.0
@author Raphael Martins Garcia
@since 30/06/2020
@param oBrowse, object, Browse do objeto Grid
@param cAlias, character, Alias que esta sendo marcado
@param cCampo, character, Campo clicacdo
@return logical, retorno logico da funcao
/*/
Static Function MarkBrowse(oBrowse,cAlias,cCampo)

	Local lRet 	    := .T.
	Local nPosAtu   := oBrowse:At()
	Local aArea	    := (cAlias)->(GetArea())
	Local cMark     := ""

	(cAlias)->(DbSetOrder(2))

	//Posiciona na linha que estava
	oBrowse:GoTo(nPosAtu)

	if cAlias == "QFIL"

		//Valido se tem algum item ja marcado
		if (cAlias)->(MsSeek("T"))

			//Desmarco item
			Reclock(cAlias,.F.)
			(cAlias)->&(cCampo) := ' '
			(cAlias)->(MsUnLock())

		endif

	endif

	//Posiciona na linha que estava
	oBrowse:GoTo(nPosAtu)

	if (cAlias)->&(cCampo) == "T"
		cMark := ""
	else
		cMark := "T"
	endif

	//Marca item
	Reclock(cAlias,.F.)
	(cAlias)->&(cCampo) := cMark
	(cAlias)->(MsUnLock())
	(cAlias)->(DbSetOrder(1))

	oBrowse:Refresh()

	RestArea(aArea)

Return(lRet)

/*/{Protheus.doc} ValProxTela
Valida se vai para proxima tela
@type function
@version 1.0
@author Raphael Martins
@since 30/06/2020
@param cAlias, character, Alias Selecionado
@param oGrid, object, oGrid da Tela atual
@return logical, retorno logico
/*/
Static Function ValProxTela(cAlias,oGrid)

	Local lRet 	   := .T.
	Local aArea	   := (cAlias)->(GetArea())

	(cAlias)->(DbSetOrder(2))

	//Valido se tem algum item ja marcado
	if !(cAlias)->(MsSeek("T"))

		Aviso("Atenção","É necessário marcar um item pra prosseguir!",{"Ok"})
		lRet := .F.

	endif

	RestArea(aArea)

Return(lRet)

/*/{Protheus.doc} RelImport
Funcao para montar panel de selecao
do arquivo de log a ser gerado da atualizacao
@type function
@version 1.0
@author g.sampaio
@since 14/03/2024
@param oPanel, object, objeto do painel
@param cRelProc, character, relatorio de processamento
/*/
Static Function RelImport(oPanel,cRelProc)

	Local oFnt16		:= TFont():New("Arial",,16,,.F.,,,,,.F.,.F.)
	Local oFnt16N		:= TFont():New("Arial",,16,,.T.,,,,,.F.,.F.)
	Local oArqRel		:= NIL
	Local oBtnRel		:= NIL
	Local nLarguraPnl	:= oPanel:nClientWidth / 2
	Local cTexto1		:= ""
	Local cImgArq		:= "icone_file.png"
	Local cImgFileHover	:= "icone_file_foco.png"
	Local cCSSBtnFile	:= ""

	//crio a parte superior da tela do wizard
	CriaPartSup(oPanel)

	@ 045 , 020 SAY oSay4 PROMPT "Informe o local do relatório de Atualizacao" SIZE 200, 010 Font oFnt16N OF oPanel COLORS 0, 16777215 PIXEL

	cTexto1 := " Após o processamento o sistema irá gerar um relatório constando todas as tabelas de preco replicadas.	"

	@ 060 , 020 SAY oSay1 PROMPT cTexto1 SIZE 300, 300 Font oFnt16 OF oPanel COLORS 0, 16777215 PIXEL

	@ 090 , 020 SAY oSay2 PROMPT "Relatório de Atualizacao:" SIZE 200, 010 Font oFnt16N OF oPanel COLORS 0, 16777215 PIXEL

	@ 107 , 020 GROUP oGroup1 TO 109 , nLarguraPnl - 2 PROMPT "" OF oPanel COLOR 0, 16777215 PIXEL

	@ 115 , 020 SAY oSay3 PROMPT "Diretório:" SIZE 050, 007 Font oFnt16N OF oPanel COLORS 0, 16777215 PIXEL

	@ 115 , 070 MSGET oArqRel VAR cRelProc  SIZE 200,010 PIXEL  Font oFnt16 OF oPanel PICTURE "@!"

	oBtnRel	:= TButton():New(114,275,"" ,oPanel,{|| cRelProc := tFileDialog( '*.txt' , 'Selecione o local', , "c:\", .F., GETF_RETDIRECTORY) },22,22,,,.F.,.T.,.F.,,.F.,,,.F. )

	cCSSBtnFile := "QPushButton {"
	cCSSBtnFile += " background-image: url(rpo:" + cImgArq + ");background-repeat: none; margin: 2px;"
	cCSSBtnFile += " border-width: 1px;"
	cCSSBtnFile += " border-radius: 0px;"
	cCSSBtnFile += " }"
	cCSSBtnFile += "QPushButton:hover {"
	cCSSBtnFile += " background-image: url(rpo:" + cImgFileHover + ");background-repeat: none; margin: 2px; cover"
	cCSSBtnFile += " border-width: 1px;"
	cCSSBtnFile += " border-radius: 0px;"
	cCSSBtnFile += "}"

	oBtnRel:SetCss(cCSSBtnFile)

Return(Nil)

/*/{Protheus.doc} VldArqRel
Funcao para validar o arquivo digitado para
geracao do relatorio
@type function
@version 1.0
@author g.sampaio
@since 14/03/2024
@param nHdlLog, numeric, variavel do arquivo de texto
@param cRelProc, character, arquivo do relatorio
@return logical, retorno logico
/*/
Static Function VldArqRel(nHdlLog,cRelProc)

	Local lRet 		:= .T.

	if !Empty(cRelProc)

		// gero o nome do arquivo a ser gerado
		cRelProc := cRelProc + Iif(GetRemoteType() == 2,"/","\") + "tabpreco_replica_" + DToS(dDatabase) + StrTran(Time(),":","")

	else // gero o arquivo de log na temp, caso nao for preenchhido

		cRelProc := Iif( SubStr(GetTempPath() ,Len(GetTempPath() )) == Iif(GetRemoteType() == 2,"/","\"), GetTempPath() , GetTempPath() + Iif(GetRemoteType() == 2,"/","\") )
		cRelProc += "tabpreco_replica_" + DToS(dDatabase) + StrTran(Time(),":","")

	endif

	//crio arquivo de relatorio do processamento da atualizacao
	nHdlLog := MsfCreate(cRelProc + ".log",0)

	if nHdlLog < 0

		lRet := .F.
		Help(,,'Help',,"Não foi possivel criar o arquivo de relatorio do processamento, favor o diretorio selecionado!",1,0)

	endif

Return(lRet)

/*/{Protheus.doc} TelaResult
Funcao para montar tela de resultado final
da atualizacao 
@type function
@version 1.0
@author g.sampaio
@since 14/03/2024
@param oPanel, object, objeto do painel
@param nHdlLog, numeric, variavel do arquivo de texto
@param cRelProc, character, relatorio de processamento
/*/
Static Function TelaResult(oPanel,nHdlLog,cRelProc)

	Local oSay1 		:= NIL
	Local oSay2 		:= NIL
	Local oGroup1		:= NIL
	Local oProcessados	:= NIL
	Local oFnt16		:= TFont():New("Arial",,16,,.F.,,,,,.F.,.F.)
	Local oFnt16N		:= TFont():New("Arial",,16,,.T.,,,,,.F.,.F.)
	Local nLarguraPnl	:= oPanel:nClientWidth / 2
	Local cTexto1		:= ""
	Local nRowsProces	:= 0

	//crio a parte superior da tela do wizard
	CriaPartSup(oPanel)

	FWMsgRun(,{|oSay| ProcAtualizacao(oSay,@nRowsProces,nHdlLog)},'Aguarde...','Processando a replicação das tabelas de preço...')

	@ 045 , 020 SAY oSay4 PROMPT "Processo de Atualizacao finalizado" SIZE 200, 010 Font oFnt16N OF oPanel COLORS 0, 16777215 PIXEL

	cTexto1 := "Processo de Atualizacao finalizado, abaixo segue os dados processados!	"

	@ 060 , 020 SAY oSay1 PROMPT cTexto1 SIZE 300, 300 Font oFnt16 OF oPanel COLORS 0, 16777215 PIXEL

	@ 090 , 020 SAY oSay2 PROMPT "Resultado da Importação:" SIZE 200, 010 Font oFnt16N OF oPanel COLORS 0, 16777215 PIXEL

	@ 100 , 020 GROUP oGroup1 TO 102 , nLarguraPnl - 2 PROMPT "" OF oPanel COLOR 0, 16777215 PIXEL

	@ 107 , 020 SAY oSay3 PROMPT "Layous Processados:" SIZE 080, 007 Font oFnt16N OF oPanel COLORS 0, 16777215 PIXEL

	@ 107 , 100 MSGET oProcessados VAR nRowsProces  SIZE 080,010 READONLY PIXEL  Font oFnt16 OF oPanel PICTURE "@E 9999999"

	@ 140 , 020 BUTTON oBtnImp PROMPT "Visualizar Log" SIZE 070, 015 OF oPanel PIXEL ACTION (ShellExecute("Open", cRelProc + ".log", " ", "C:\", 1 ))

Return(Nil)

/*/{Protheus.doc} ProcAtualizacao
Processa atualizacao
@type function
@version 1.0
@author Raphael Martins
@since 02/07/2020
@param oSay, object, Objeto do FWMsgRun
@param nProcessados, numeric, Contador de Contratos Atualizados
@param nHdlLog, numeric, Arquivo de Log da Atualizacao
/*/
Static Function ProcAtualizacao(oSay,nProcessados,nHdlLog)

	Local aArea         := GetArea()
	Local aDadosTabela	:= {}
	Local cPulaLinha    := Chr(13) + Chr(10)

	//verifico se arquivo de log existe
	if nHdlLog > 0

		fWrite(nHdlLog , "######### REPLICANDO TABELAS DE PRECO #############")
		fWrite(nHdlLog , cPulaLinha )
		fWrite(nHdlLog , " >> Data Inicio: " + DTOC( Date() ) )
		fWrite(nHdlLog , cPulaLinha )
		fWrite(nHdlLog , " >> Hora Inicio: " + Time() )
		fWrite(nHdlLog , cPulaLinha )

	endif

	QDA0->(DbGotop())
	While QDA0->(!Eof())

		// layou selecionado
		If !Empty(QDA0->DA0_OK)

			if nHdlLog > 0

				fWrite(nHdlLog , cPulaLinha )
				fWrite(nHdlLog , "Copiando o layout: " + AllTrim(QDA0->DA0_CODTAB) + "-" + AllTrim(QDA0->DA0_DESCRI) + " ..." )
				fWrite(nHdlLog , cPulaLinha )

			endif

			oSay:cCaption := ("Copiando o layout: " + AllTrim(QDA0->DA0_CODTAB) + "-" + AllTrim(QDA0->DA0_DESCRI) + " ...")
			ProcessMessages()

			// pego os dados do Layout para ser copiado
			aDadosTabela := DadosTabela(QDA0->DA0_CODTAB)

			QFIL->(DbGotop())
			While QFIL->(!Eof())

				//valido se o item esta marcado
				if !Empty(QFIL->FIL_OK) .And. AllTrim(QFIL->FIL_FILIAL) <> AllTrim(cFilAnt)
					lContinua := MigraTabela(QFIL->FIL_FILIAL, aDadosTabela)
				endif

				QFIL->(DbSkip())

			EndDo

			if nHdlLog > 0

				fWrite(nHdlLog , cPulaLinha )
				fWrite(nHdlLog , " >> Layout: " + QDA0->DA0_CODTAB + " processado com sucesso! " )
				fWrite(nHdlLog , cPulaLinha )

			endif

			nProcessados++

		EndIf

		QDA0->(DBSkip())
	Enddo

	//verifico se arquivo de log existe
	if nHdlLog > 0
		fClose(nHdlLog) // fecho o arquivo de log
	endif

	RestArea(aArea)

Return(Nil)

/*/{Protheus.doc} DadosTabela
Pego os dados da tabela de preco
@type function
@version 1.0
@author g.sampaio
@since 14/03/2024
@param cCodigoTabela, character, codigo do layout
@return array, dados das tabelas
/*/
Static Function DadosTabela(cCodigoTabela)

	Local aAux 		As Array
	Local aDados	As Array
	Local aItem		As Array
	Local aDadosDA0	As Array
	Local aRetorno	As Array
	Local cQuery 	As Character

	Default cCodigoTabela	:= ""

	// atribui valor as variaveis
	aAux		:= {}
	aDados		:= {}
	aItem		:= {}
	aDadosDA0	:= {}
	aRetorno	:= {}

	If !Empty(cCodigoTabela)

		cQuery := " SELECT "
		cQuery += " 	DA0.DA0_CODTAB CODIGO, "
		cQuery += " 	DA0.DA0_DESCRI DESCRICAO "
		cQuery += " FROM " + RetSQLName("DA0") + " DA0 "
		cQuery += " WHERE DA0.D_E_L_E_T_ = ' ' "
		cQuery += " 	AND DA0.DA0_FILIAL = '"+ xFilial("DA0") + "' "
		cQuery += " 	AND DA0.DA0_CODTAB = '"+ cCodigoTabela + "' "
		cQuery += " ORDER BY DA0_CODTAB "

		cQuery := ChangeQuery(cQuery)

		if Select("TRBDA0") > 0
			TRBDA0->(DbCloseArea())
		endif

		MPSysOpenQuery(cQuery, "TRBDA0")

		If TRBDA0->(!Eof())

			aAux := {}
			Aadd(aAux, CopiaDados(TRBDA0->CODIGO, "DA0"))
			Aadd(aAux, CopiaDados(TRBDA0->CODIGO, "DA1"))

			// pego os dados para retorno
			Aadd(aRetorno, aAux)

		EndIf

	EndIf

Return(aRetorno)

/*/{Protheus.doc} CopiaDados
Funcao para copiar dados
@type function
@version 1.0 
@author g.sampaio
@since 02/08/2023
@param cTabelaOrigem, character, codigo da tabela de preço de origem
@param cTabela, character, alias da tabela
@return array, dados de retorno
/*/
Static Function CopiaDados(cTabelaOrigem, cTabela, cItemUH9)

	Local aArea 	:= GetArea()
	Local aAux 		:= {}
	Local aRetorno	:= {}
	Local cQuery	:= ""

	Default cTabelaOrigem	:= ""
	Default cTabela			:= ""
	Default cItemUH9		:= ""

	If !Empty(cTabela)

		cQuery  := " SELECT LAYOUT.R_E_C_N_O_ AS RECTAB FROM " + RetSqlName(cTabela) + " LAYOUT "
		cQuery	+= " WHERE LAYOUT.D_E_L_E_T_ = ' ' "
		cQuery  += " AND LAYOUT."+cTabela+"_FILIAL = '" + xFilial(cTabela) + "' "
		cQuery	+= " AND LAYOUT."+cTabela+"_CODTAB = '" + cTabelaOrigem + "' "

		cQuery	:= ChangeQuery(cQuery)

		MPSysOpenQuery(cQuery, "TABDADOS")

		While TABDADOS->(!Eof())

			(cTabela)->(DbGoTo(TABDADOS->RECTAB))

			// verifico se encontro a estrutura da SX3
			If EstruSX3(cTabela)
				While TRB->(!Eof())

					// verifico se o contexto do campo e real
					If TRB->CONTEXT <> "V"

						// alimento o array com a estrutura
						aAdd(aAux, { TRB->CAMPO, &(""+cTabela+"->" + TRB->CAMPO + "" )  })

					EndIf

					TRB->(DbSkip())
				EndDo
			EndIf

			aAdd(aRetorno, aAux)
			aAux := {}

			TABDADOS->(DbSkip())
		EndDo

	EndIf

	RestArea(aArea)

Return(aRetorno)

/*/{Protheus.doc} EstruSX3
Estrutura da SX3
@type function
@version 1.0	
@author g.sampaio
@since 02/08/2023
@param cTabela, character, alias da tabela
@return character, alias de dados da sx3
/*/
Static Function EstruSX3(cTabela)

	Local cQry 			:= ""
	Local cAliasTemp	:= "TRB"

	Default cTabela 	:= ""

	cQry += " SELECT "
	cQry += " 	X3_CAMPO 	AS CAMPO, "
	cQry += " 	X3_CONTEXT 	AS CONTEXT, "
	cQry += " 	X3_TIPO 	AS TIPO "
	cQry += " FROM " + RetSqlName("SX3") + " TBL "
	cQry += " WHERE TBL.D_E_L_E_T_ = ' ' "

	if !Empty(AllTrim(cTabela))
		cQry += " AND X3_ARQUIVO = '"+AllTrim(cTabela)+"'"
	endif

	cQry += " ORDER BY X3_ORDEM "

	if Select(cAliasTemp) > 0
		(cAliasTemp)->(DbCloseArea())
	endif

	MPSysOpenQuery( cQry, cAliasTemp)

	DbSelectArea(cAliasTemp)
	(cAliasTemp)->(DbGoTop())

Return((cAliasTemp)->(!Eof()))

/*/{Protheus.doc} MigraTabela
Funcao para migrar tabela
@type function
@version 1.0
@author g.sampaio
@since 14/03/2024
@param cCodigoFilial, character, codigo da filial
@param aDadosTabela, array, dados da tabela de preço
@return logical, retorno da funcao
/*/
Static Function MigraTabela(cCodigoFilial As Character, aDadosTabela As Array)

	Local aArea			As Array
	Local aAreaDA0		As Array
	Local aAreaDA1		As Array
	Local aDA0			As Array
	Local aDA1			As Array
	Local aCampos		As Array
	Local cFilBkp		As Character
	Local cCodigoTabela	As Character
	Local cPulaLinha	As Character
	Local lRetorno 		As Logical
	Local nCampos		As Numeric
	Local nDA0			As Numeric
	Local nDA1 			As Numeric

	Default cCodigoFilial	:= ""
	Default aDadosTabela	:= {}

	// aitrbui valor as variaveis
	aArea	 		:= GetArea()
	aAreaDA0		:= DA0->(GetArea())
	aAreaDA1		:= DA1->(GetArea())
	cFilBkp	 		:= cFilAnt
	cCodigoTabela	:= ""
	lRetorno 		:= .T.
	cPulaLinha    	:= Chr(13) + Chr(10)

	// entrou na filial que vai migrar
	cFilAnt	:= cCodigoFilial

	if nHdlLog > 0

		fWrite(nHdlLog , cPulaLinha )
		fWrite(nHdlLog , " Filial de destino " + cFilAnt + " ..." )
		fWrite(nHdlLog , cPulaLinha )

	endif

	// pego o codigo do layout
	cCodigoTabela := NextCodigo()

	aDA0 := aDadosTabela[1][1]
	aDA1 := aDadosTabela[1][2]

	BEGIN TRANSACTION

		If DA0->(Reclock("DA0", .T.))

			// DA0 - copio o cabecalho da tabela de preços
			For nDA0 := 1 To Len(aDA0)

				aCampos := aDA0[nDA0]

				For nCampos := 1 To Len(aCampos)

					If AllTrim(aCampos[nCampos][1]) == "DA0_FILIAL"
						DA0->DA0_FILIAL := xFilial("DA0")
					ElseIf AllTrim(aCampos[nCampos][1]) == "DA0_CODTAB"
						DA0->DA0_CODTAB := cCodigoTabela
					Else
						DA0->&(aCampos[nCampos][1]) := aCampos[nCampos][2]
					EndIf

				Next nCampos

			Next nDA0

			DA0->(MsUnLock())

		EndIf

		// DA1 - copio o cabecalho da tabela de precos
		For nDA1 := 1 To Len(aDA1)

			If DA1->(Reclock("DA1", .T.))

				aCampos := aDA1[nDA1]

				For nCampos := 1 To Len(aCampos)

					If AllTrim(aCampos[nCampos][1]) == "DA1_FILIAL"
						DA1->DA1_FILIAL := xFilial("DA1")
					ElseIf AllTrim(aCampos[nCampos][1]) == "DA1_CODTAB"
						DA1->DA1_CODTAB := cCodigoTabela
					Else
						DA1->&(aCampos[nCampos][1]) := aCampos[nCampos][2]
					EndIf

				Next nCampos

				DA1->(MsUnLock())

			EndIf

		Next nDA1

	END TRANSACTION

	// restauro o valor da filial
	cFilAnt := cFilBkp

	RestArea(aAreaDA1)
	RestArea(aAreaDA0)
	RestArea(aArea)

Return(lRetorno)

/*/{Protheus.doc} NextCodigo
Rotina para gerar o proximo codigo 
da tabela de precos
@type function
@version 1.0
@author g.sampaio
@since 14/03/2024
@return character, proximo codigo da tabela de precos
/*/
Static Function NextCodigo()

	Local aArea		As Array
	Local aAreaDA0	As Array
	Local cQuery	As Character
	Local cRetorno	As Character

	// atribui valor as variaveis
	aArea		:= GetArea()
	aAreaDA0	:= DA0->(GetArea())

	cQuery := " SELECT "
	cQuery += " 	MAX(DA0.DA0_CODTAB) AS MAX_CODIGO "
	cQuery += " FROM " + RetSQLName("DA0") + " DA0 "
	cQuery += " WHERE DA0.DA0_FILIAL = '"+ xFilial("DA0") + "' "

	cQuery	:= ChangeQuery(cQuery)

	MPSysOpenQuery(cQuery, "TRBMAX")

	If TRBMAX->(!Eof())
		If !Empty(TRBMAX->MAX_CODIGO)
			cRetorno := Soma1(TRBMAX->MAX_CODIGO)
		Else
			cRetorno := StrZero(1, TamSX3("DA0_CODTAB")[1])
		EndIf
	Else
		cRetorno := StrZero(1, TamSX3("DA0_CODTAB")[1])
	EndIf

	DA0->(DbSetOrder(1))
	If DA0->(MsSeek(xFilial("DA0")+cRetorno))
		While DA0->(MsSeek(xFilial("DA0")+cRetorno))
			cRetorno := Soma1(Alltrim(cRetorno))
		EndDo
	EndIf

	// verifico se o codigo esta em uso
	FreeUsedCode()
	While !MayIUseCode("DA0"+xFilial("DA0")+cRetorno)
		// gero um novo nosso numero
		cRetorno := Soma1(Alltrim(cRetorno))
	EndDo

	RestArea(aAreaDA0)
	RestArea(aArea)

Return(cRetorno)
