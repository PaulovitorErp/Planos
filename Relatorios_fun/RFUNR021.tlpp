#include "totvs.ch"
#include "fwprintsetup.ch"
#include "fileio.ch"
#include "rptdef.ch"

/*/{Protheus.doc} RFUNR021
Relatório de Impressão de Controle de Veículos
@type function
@version 1.0
@author g.sampaio
@since 21/10/2022
/*/
User Function RFUNR021()

	Local cRelatorio			:= "Resumo de Serviços"
	Local cPerg         		:= "RFUNR021"
	Local cCSSGroup				:= ""
	Local cBotaoCSSCinza  		:= ""
	Local cBotaoCSSAzul   		:= ""
	Local cBotaoCSSVerde  		:= ""
	Local cBotaoCSSLaranja  	:= ""
	Local cBotaoCSSVermelho  	:= ""
	Local oBtnSair      		:= Nil
	Local oBtnPDF      			:= Nil
	Local oBtnHTML     			:= Nil
	Local oBtnPlanilha  		:= Nil
	Local oBtnParametros		:= Nil
	Local oGroupRel     		:= Nil
	Local oSayRel       		:= Nil
	Local oDlgRel       		:= Nil
	Local oFontTitulo   		:= Nil
	Local oCSSButtonVirtus				:= Nil

	// chamo a classe de estilo CSS
	oCSSButtonVirtus := CSSButtonVirtus():New()

	// CSS do objeto group para colorir a borda
	cCSSGroup 			:= oCSSButtonVirtus:CSSGroup()

	// monto o CSS dos botoes
	cBotaoCSSCinza  	:= oCSSButtonVirtus:CSSButtonGray()
	cBotaoCSSAzul   	:= oCSSButtonVirtus:CSSButtonBlue()
	cBotaoCSSVerde  	:= oCSSButtonVirtus:CSSButtonGreen()
	cBotaoCSSLaranja  	:= oCSSButtonVirtus:CSSButtonOrange()
	cBotaoCSSVermelho  	:= oCSSButtonVirtus:CSSButtonRed()

	// crio o grupo de perguntas
	AjustaSX1(cPerg)

	While Pergunte(cPerg,.T.)

		DEFINE MSDIALOG oDlgRel TITLE "Impressão de Relatório - " + cRelatorio FROM 000, 000  TO 200, 455 COLORS 0, 16777215 PIXEL

		@ 003, 003 GROUP oGroupRel TO 095, 227 PROMPT "Impressão de Relatório - " + cRelatorio OF oDlgRel COLOR 0, 16777215 PIXEL
		oGroupRel:oFont := oFontTitulo
		oGroupRel:SetCss(cCSSGroup)

		@ 023, 014 SAY oSayRel PROMPT "Este relatório tem como intuito a impressão dos Serviços Executados" SIZE 205, 025 OF oDlgRel COLORS 0, 16777215 PIXEL

		// botoes da rotina
		@ 065, 010 BUTTON oBtnParametros    PROMPT "Parametros"     SIZE 040, 015 OF oDlgRel PIXEL ACTION(Pergunte(cPerg,.T.))
		oBtnParametros:SetCss(cBotaoCSSCinza)

		@ 065, 055 BUTTON oBtnHTML      	PROMPT "HTML"  		 	SIZE 040, 015 OF oDlgRel PIXEL ACTION(ValidParam(cRelatorio, 1))
		oBtnHTML:SetCss(cBotaoCSSAzul)

		@ 065, 100 BUTTON oBtnPDF     	 	PROMPT "PDF"        	SIZE 040, 015 OF oDlgRel PIXEL ACTION(ValidParam(cRelatorio, 2))
		oBtnPDF:SetCss(cBotaoCSSLaranja)

		@ 065, 145 BUTTON oBtnPlanilha      PROMPT "Planilha"     	SIZE 040, 015 OF oDlgRel PIXEL ACTION(ValidParam(cRelatorio, 3))
		oBtnPlanilha:SetCss(cBotaoCSSVerde)

		@ 065, 190 BUTTON oBtnSair          PROMPT "Sair"           SIZE 030, 015 OF oDlgRel PIXEL ACTION(oDlgRel:End())
		oBtnSair:SetCss(cBotaoCSSVermelho)

		ACTIVATE MSDIALOG oDlgRel CENTERED

	EndDo

Return(Nil)

/*/{Protheus.doc} ValidParam
Funcao para validar a impressao
@type function
@version 1.0
@author g.sampaio
@since 04/12/2022
@param nTipoImpressao, numeric, tipo de impressao
@return logical, retorno logico para impressao
/*/
Static Function ValidParam(cRelatorio, nTipoImpressao)

	Local aTitulo   := {}
	Local lRetorno 	:= .T.

	Default cRelatorio  := ""
	Default nTipoImpressao	:= 0

	Aadd(aTitulo, "Filial de Servico") 							// [1] Filial
	Aadd(aTitulo, "Grupo") 							// [1] Filial
	Aadd(aTitulo, "Descrição") 						// [2] Apontamento
	Aadd(aTitulo, "Produto/Serviço") 				// [3] Tipo de Serviço
	Aadd(aTitulo, "Descrição") 						// [4] Data Cadastro
	Aadd(aTitulo, "Tipo") 							// [5] Falecido
	Aadd(aTitulo, "Quantidade Total") 				// [6] Data do Falecimento
	Aadd(aTitulo, "Media de Preço") 				// [7] Cliente PV
	Aadd(aTitulo, "Valor Total de Desconto") 		// [8] Contrato
	Aadd(aTitulo, "Valor Total de Recebido") 		// [9] Filial de Serviço

	// caso estiver tudo certo com os parametros do relatorio
	if lRetorno

		oProcess := MsNewProcess():New( { | lEnd | ProccesaRelatorio( @oProcess, @lEnd, nTipoImpressao, cRelatorio, aTitulo) }, cRelatorio, "Aguarde, processando os dados do relatorio...", .F. )
		oProcess:Activate()

	else
		MsgAlert("Não existem dados para a impressão do relatório!")
	endIf


Return(lRetorno)

/*/{Protheus.doc} ProccesaRelatorio
Rotina de processamento para a impressao do relatorio
@type function
@version 1.0
@author g.sampaio
@since 25/05/2021
@param oProcess, object, objeto da barra de processamento
@param lEnd, logical, variavel logica para indicar se finaliza ou não a impressão
@param cRelatorio, character, nome do relatorio
@param nTipoImpressao, numeric, tipo de impressao 1=Planilha;2=PDF
@param aTitulo, array, titulos do relatorio
/*/
Static Function ProccesaRelatorio( oProcess, lEnd, nTipoImpressao, cRelatorio, aTitulo )

	Local aDados			As Array
	Local aTotalizadores	As Array
	Local aInformacao		As Array

	Default cRelatorio		:= ""
	Default aTitulo			:= {}

	// atribui valor inicial as variaveis
	aDados 			:= {}
	aInformacao		:= {}
	aTotalizadores	:= {}

	// funcao para gerar os dados
	aInformacao := GeraDados(nTipoImpressao, @aTotalizadores)

	// verifico se tem dados para serem impressos
	if Len(aInformacao) > 0

		// atualizo o objeto de processamento
		oProcess:IncRegua1('Consultando dados para o impressão...')

		// faco tratamento dos dados
		If nTipoImpressao == 2
			aDados := aInformacao
		else
			aDados := U_UTrataDados(aTitulo, aInformacao)
		EndIf

		// verifico se tenho dados para a impressao
		if Len(aDados) > 0

			if nTipoImpressao == 1 // HTML

				// atualizo o objeto de processamento
				oProcess:IncRegua1('Impressão em HTML...')

				// atualizo o objeto de processamentp
				oProcess:SetRegua2(Len(aDados))

				GeraHTML( @oProcess, @lEnd, cRelatorio, aTitulo, aDados )

			elseIf nTipoImpressao == 2 // PDF

				// atualizo o objeto de processamento
				oProcess:IncRegua1('Impressão em PDF...')

				// atualizo o objeto de processamentp
				oProcess:SetRegua2(Len(aDados))

				GeraPDF( @oProcess, @lEnd, cRelatorio, aTitulo, aDados, aTotalizadores )

			elseIf nTipoImpressao == 3 // Planilha

				// atualizo o objeto de processamento
				oProcess:IncRegua1('Impressão em Planilha...')

				// atualizo o objeto de processamentp
				oProcess:SetRegua2(Len(aDados))

				GeraPlanilha( @oProcess, @lEnd, cRelatorio, aTitulo, aDados )

			endIf

		endIf

	Else
		MsgAlert("Não existem dados para geração do relatório!")

	endIf

Return(Nil)

/*/{Protheus.doc} GeraPDF
Funcao para a impressao em PDF
@type function
@version 1.0
@author g.sampaio
@since 04/12/2022
@param oProcess, object, param_description
@param lEnd, logical, param_description
@param cRelatorio, character, param_description
@param aDados, array, param_description
@return variant, return_description
/*/
Static Function GeraPDF( oProcess, lEnd, cRelatorio, aTitulo, aDados, aTotalizadores )

	Local aColunas			    As Array
	Local aDadosServicos		As Array
	Local aTotFilial 			As Array
	Local nMVTamanhoFonte		As Numeric
	Local nMovimentacao 		As Numeric
	Local oGeraPDF				As Object
	Local oPDFPrint				As Object

	Default aDados			:= {}
	Default cRelatorio		:= ""
	Default aTotalizadores	:= {}

	// atribuo valor as variaveis
	oGeraPDF		    := Nil
	oPDFPrint 		    := Nil
	nMVTamanhoFonte	    := SuperGetMV("MV_XFONTV1",,1)
	nMovimentacao		:= 0
	aColunas	        := {}
	aDadosServicos		:= {}
	aTotFilial			:= {}

	aTitulo := {}
	Aadd(aTitulo, "Grupo") 							// [1] Grupo
	Aadd(aTitulo, "Descrição") 						// [2] Descrição
	Aadd(aTitulo, "Produto/Serviço") 				// [3] "Produto/Serviço"
	Aadd(aTitulo, "Descrição") 						// [4] "Descrição"
	Aadd(aTitulo, "Tipo") 							// [5] "Tipo"
	Aadd(aTitulo, "Quantidade Total") 				// [6] "Quantidade Total"
	Aadd(aTitulo, "Media de Preço") 				// [7] "Media de Preço"
	Aadd(aTitulo, "Valor Total de Desconto") 		// [8] "Valor Total de Desconto"
	Aadd(aTitulo, "Valor Total de Recebido") 		// [9] "Valor Total de Recebido"

	// atualizo o objeto de processamento
	oProcess:IncRegua2('Iniciando objeto de impressão...')

	// inicio a classe de geracao de planilha
	oGeraPDF := VirtusRelPDF():New(@oPDFPrint, cRelatorio, 1, nMVTamanhoFonte)

	//aColunas  := { oGeraPDF:nMargemL, 400, 1000, 1200, 1400, 1600, 1800, 2000, 2200 }
	Aadd(aColunas,  oGeraPDF:nMargemL) 				// [1] Grupo
	Aadd(aColunas, 150) 			// [2] Descrição
	Aadd(aColunas, 650) 			// [3] "Produto/Serviço"
	Aadd(aColunas, 800) 			// [4] "Descrição"
	Aadd(aColunas, 1500) 			// [5] "Tipo"
	Aadd(aColunas, 1750) 			// [6] "Quantidade Total"
	Aadd(aColunas, 2000) 			// [7] "Media de Preço"
	Aadd(aColunas, 2250) 			// [8] "Valor Total de Desconto"
	Aadd(aColunas, 2500) 			// [9] "Valor Total de Recebido"

	//------------------------
	// impresso do cabecalho
	//------------------------

	// atualizo o objeto de processamento
	oProcess:IncRegua2('Impressão do cabeçalho...')

	oGeraPDF:ImpCabecalho(@oPDFPrint, cRelatorio)

	// salto a linha
	oGeraPDF:nLinha += 100

	//--------------------------------
	// faco a impressao do relatorio
	//-------------------------------

	if Len(aDados) > 0

		For nMovimentacao := 1 to Len(aDados)

			oPDFPrint:Say( oGeraPDF:nLinha+17, oGeraPDF:nMargemL, aDados[nMovimentacao, 1], oGeraPDF:oFontNCab )

			// verifico se tem dados de contratos para serem impressos
			if Len(aDados[nMovimentacao, 2]) > 0

				// faco tratamento dos dados
				aDadosMovimentacao :=  U_UTrataDados(aTitulo, aDados[nMovimentacao, 2])

				// faco a impressao do conteudo do relatorio
				oGeraPDF:ImpRelatorio( @oProcess, @lEnd, @oPDFPrint, cRelatorio, aTitulo, aColunas, aDadosMovimentacao)

			EndIf

			// verifico se tem dados de contratos para serem impressos
			if Len(aDados[nMovimentacao, 3]) > 0

				aTotFilial := aDados[nMovimentacao, 3]

				If Len(aTotFilial) > 0

					// "Total de Titulares:"
					oPDFPrint:Say( oGeraPDF:nLinha+17, oGeraPDF:nMargemL, aTotFilial[1, 1], oGeraPDF:oFontNCab )
					oPDFPrint:Say( oGeraPDF:nLinha+17, 300, aTotFilial[1, 2], oGeraPDF:oFontNCab )

					// "Total de Dependentes:"
					oPDFPrint:Say( oGeraPDF:nLinha+17, 450, aTotFilial[2, 1], oGeraPDF:oFontNCab )
					oPDFPrint:Say( oGeraPDF:nLinha+17, 750, aTotFilial[2, 2], oGeraPDF:oFontNCab )

					// "Total de Falecidos:"
					oPDFPrint:Say( oGeraPDF:nLinha+17, 975, aTotFilial[3, 1], oGeraPDF:oFontNCab )
					oPDFPrint:Say( oGeraPDF:nLinha+17, 1275, aTotFilial[3, 2], oGeraPDF:oFontNCab )

				EndIf

			EndIf

			// salto a linha
			oGeraPDF:nLinha += 50

		Next nMovimentacao

	endIf

	//-----------------------------
	// impressao dos totalizadores
	//-----------------------------

	If Len(aTotalizadores)

		// "Total de Titulares:"
		oPDFPrint:Say( oGeraPDF:nLinha+17, oGeraPDF:nMargemL, aTotalizadores[1, 1], oGeraPDF:oFontNCab )
		oPDFPrint:Say( oGeraPDF:nLinha+17, 300, aTotalizadores[1, 2], oGeraPDF:oFontNCab )

		// "Total de Dependentes:"
		oPDFPrint:Say( oGeraPDF:nLinha+17, 450, aTotalizadores[2, 1], oGeraPDF:oFontNCab )
		oPDFPrint:Say( oGeraPDF:nLinha+17, 750, aTotalizadores[2, 2], oGeraPDF:oFontNCab )

		// "Total de Falecidos:"
		oPDFPrint:Say( oGeraPDF:nLinha+17, 975, aTotalizadores[3, 1], oGeraPDF:oFontNCab )
		oPDFPrint:Say( oGeraPDF:nLinha+17, 1275, aTotalizadores[3, 2], oGeraPDF:oFontNCab )

	EndIf


	//------------------------
	// impresso do rodape
	//------------------------

	// atualizo o objeto de processamento
	oProcess:IncRegua2('Impressão do rodape...')

	// faco a impressao do rodape
	oGeraPDF:ImpRodape(@oPDFPrint)

	//------------------------
	// gera o relatorio
	//------------------------

	// atualizo o objeto de processamento
	oProcess:IncRegua2('Gerando o PDF do relatorio...')

	// faco a impressao do relatorio
	oGeraPDF:Imprimir(@oPDFPrint)

Return( Nil )

/*/{Protheus.doc} GeraDados
funcao para a geracao de dados
@type function
@version 1.0
@author g.sampaio
@since 28/06/2021
@param oTempTipo, object, objeto do tipo de vendedores
@param oTempDetalhes, object, objeto do tipo de detalhes
@return array, array de dados do retorno
/*/
Static Function GeraDados(nTipoImpressao, aTotalizadores)

	Local aArea                 := GetArea()
	Local aAux 					:= {}
	Local aRetorno              := {}
	Local aFiliais 				:= {}
	Local aDadosServicos        := {}
	Local aDadosFiliais			:= {}
	Local cDeContrato  			:= ""
	Local cAteContrato  		:= ""
	Local cTipoServ				:= ""
	Local cPlano 				:= ""
	Local cFiliais 		        := ""
	Local cFiliailServ 		    := ""
	Local cGrupo				:= ""
	Local cFilBkp 				:= cFilAnt
	Local dDeData    			:= StoD("")
	Local dAteData   			:= StoD("")
	Local dDeFalecimento  		:= StoD("")
	Local dAteFalecimento 		:= StoD("")
	Local nI 					:= 0
	Local nGeraPV               := 0
	Local nQtdServicos			:= 0
	Local nTotContratado 		:= 0
	Local nTotDesconto 			:= 0
	Local nTotRecebido 			:= 0
	Local nGeralDesconto 		:= 0
	Local nGeralServicos		:= 0
	Local nGeralRecebido		:= 0

	Default nTipoImpressao  := 0
	Default aTotalizadores	:= {}

	// verifico se o array de parametros tem informacoes
	// preenche os parametros para validacao
	dDeData  		:= MV_PAR01
	dAteData 		:= MV_PAR02
	cTipoServ       := MV_PAR03
	cGrupo 			:= MV_PAR04
	cPlano		    := MV_PAR05
	cFiliais		:= MV_PAR06
	cFiliailServ 	:= MV_PAR07
	nGeraPV         := MV_PAR08

	If Empty(cFiliais)
		cFiliailServ := cFilAnt
	EndIf

	If !Empty(cFiliailServ)
		aFiliais := StrTokArr(AllTrim(cFiliailServ),";")
	EndIf

	For nI := 1 To Len(aFiliais)

		cFilAnt := aFiliais[nI]

		//------------------------------------
		//Executa query para leitura da tabela
		//------------------------------------
		If Select("TMPSRV") > 0
			TMPSRV->( DbCloseArea() )
		EndIf

		cQuery := " SELECT "
		cQuery += "    	ITENS_ENTREGUES.UJ2_PRODUT PROD_SERV, "
		cQuery += "    	PRODUTO.B1_GRUPO GRUPO_PROD, "
		cQuery += "    	PRODUTO.B1_DESC DESCRI_PROD, "
		cQuery += "    	PRODUTO.B1_TIPO TIPO_PROD, "
		cQuery += "    	ISNULL(GRUPO_PRODUTO.BM_DESC,'') DESCRI_GRUPO, "
		cQuery += "    	SUM(ITENS_ENTREGUES.UJ2_QUANT) QUANTIDADE, "
		cQuery += "    	SUM(ITENS_ENTREGUES.UJ2_PRCVEN) PRECOVEN, "
		cQuery += "    	SUM(ITENS_ENTREGUES.UJ2_VLRDES) DESCONTO, "
		cQuery += "    	SUM(ITENS_ENTREGUES.UJ2_TOTAL) VALOR_TOTAL, "
		cQuery += "    	(SUM(ITENS_ENTREGUES.UJ2_PRCVEN) / SUM(ITENS_ENTREGUES.UJ2_QUANT)) MEDIA_PRC "
		cQuery += " FROM " + RetSQLName("UJ2") + " ITENS_ENTREGUES "
		cQuery += " INNER JOIN " + RetSQLName("UJ0") + " APONTAMENTO ON APONTAMENTO.D_E_L_E_T_ = '' "
		cQuery += "		AND APONTAMENTO.UJ0_FILIAL = '" + xFilial("UJ0") + "' "
		cQuery += " 	AND APONTAMENTO.UJ0_CODIGO = ITENS_ENTREGUES.UJ2_CODIGO "
		cQuery += " INNER JOIN " + RetSQLName("SB1") + " PRODUTO ON PRODUTO.D_E_L_E_T_ = ' ' "
		cQuery += "		AND PRODUTO.B1_FILIAL = '" + xFilial("SB1") + "' "
		cQuery += " 	AND PRODUTO.B1_COD = ITENS_ENTREGUES.UJ2_PRODUT "
		cQuery += " LEFT JOIN " + RetSQLName("SBM") + "  GRUPO_PRODUTO ON GRUPO_PRODUTO.D_E_L_E_T_ = ' ' "
		cQuery += "		AND GRUPO_PRODUTO.BM_FILIAL = '" + xFilial("SBM") + "' "
		cQuery += " 	AND GRUPO_PRODUTO.BM_GRUPO = PRODUTO.B1_GRUPO "
		cQuery += " WHERE ITENS_ENTREGUES.D_E_L_E_T_ = ' ' "
		cQuery += " 	AND ITENS_ENTREGUES.UJ2_OK <> ' ' "

		If !Empty(dAteData)
			cQuery += " AND APONTAMENTO.UJ0_DTCADA BETWEEN '" + DtoS(dDeData) + "' AND '" + DtoS(dAteData) + "' "
		EndIf

		If !Empty(cTipoServ)
			cQuery += " AND APONTAMENTO.UJ0_TPSERV IN " + FormatIN(AllTrim(cTipoServ), ";")
		EndIf

		If !Empty(cGrupo)
			cQuery += " AND GRUPO_PRODUTO.BM_GRUPO IN " + FormatIN(AllTrim(cGrupo), ";")
		EndIf

		If !Empty(cPlano)
			cQuery += " AND APONTAMENTO.UJ0_PLANOC IN " + FormatIN(AllTrim(cPlano), ";") + " OR SERVICOS.UJ0_PLANOE IN " + FormatIN(AllTrim(cPlano), ";") + " "
		EndIf

		If !Empty(aFiliais[nI])
			cQuery += " AND APONTAMENTO.UJ0_FILSER = '" + AllTrim(aFiliais[nI]) + "' "
		EndIf

		If nGeraPV == 2 // pedido de venda gerado,.
			cQuery += " AND (APONTAMENTO.UJ0_PV <> ' ' OR APONTAMENTO.UJ0_PV2 <> ' ' OR APONTAMENTO.UJ0_PVADM <> ' ') "
		EndIf

		cQuery += " GROUP BY ITENS_ENTREGUES.UJ2_PRODUT, "
		cQuery += " 	PRODUTO.B1_GRUPO, "
		cQuery += " 	PRODUTO.B1_DESC, "
		cQuery += " 	PRODUTO.B1_TIPO, "
		cQuery += " 	GRUPO_PRODUTO.BM_DESC "
		cQuery += " ORDER BY PRODUTO.B1_GRUPO, PRODUTO.B1_TIPO, PRODUTO.B1_DESC  "

		// trato a query
		cQuery := ChangeQuery(cQuery)

		MPSysOpenQuery( cQuery, 'TMPSRV' )

		While TMPSRV->(!Eof())

			aAux := {}
			if nTipoImpressao <> 2
				aAdd( aAux, aFiliais[nI] + "-" + UPPER(Alltrim(FWFilialName(cEmpant, aFiliais[nI]))) ) // [1] Filial
			EndIf
			aAdd( aAux, TMPSRV->GRUPO_PROD ) // [1] Filial
			aAdd( aAux, TMPSRV->DESCRI_GRUPO ) // [2] Apontamento
			aAdd( aAux, TMPSRV->PROD_SERV ) // [3] Tipo de Serviço
			aAdd( aAux, TMPSRV->DESCRI_PROD ) // [4] Data Cadastro
			aAdd( aAux, TMPSRV->TIPO_PROD ) // [5] Falecido
			aAdd( aAux, TMPSRV->QUANTIDADE ) // [8] Contrato
			aAdd( aAux, TMPSRV->MEDIA_PRC )  // [13] Vlr.Contratado (R$)
			aAdd( aAux, TMPSRV->DESCONTO )  // [11] PV Cliente
			aAdd( aAux, TMPSRV->VALOR_TOTAL )  // [12] PV Adm Planos

			If nTipoImpressao == 2
				nQtdServicos++
				nTotDesconto += TMPSRV->DESCONTO
				nTotRecebido += TMPSRV->VALOR_TOTAL
			EndIf

			aAdd(aDadosServicos, aAux)

			TMPSRV->(DBSkip())
		endDo

		If nTipoImpressao == 2 // impressao em pdf
			aAdd(aTotalizadores, {"Total de Serviços:", AllTrim(TransForm(nQtdServicos,"@E 999,999,999"))})
			aAdd(aTotalizadores, {"Valor Total de Desconto:", AllTrim(TransForm(nTotDesconto,"@E 999,999,999"))})
			aAdd(aTotalizadores, {"Valor Total Recebido:", AllTrim(TransForm(nTotRecebido,"@E 999,999,999"))})

			aAdd(aDadosFiliais, { aFiliais[nI] + "-" + UPPER(Alltrim(FWFilialName(cEmpant, aFiliais[nI]))), aDadosServicos, aTotalizadores})

			nGeralServicos += nQtdServicos
			nGeralDesconto += nTotDesconto
			nGeralRecebido += nTotRecebido

			aDadosServicos 	:= {}
			aTotalizadores 	:= {}
			nQtdServicos 	:= 0
			nTotDesconto 	:= 0
			nTotRecebido 	:= 0
		EndIf

		If Select("TMPSRV") > 0
			TMPSRV->( DbCloseArea() )
		EndIf

	Next nI

	aAdd(aTotalizadores, {"Total de Serviços:", AllTrim(TransForm(nGeralServicos,"@E 999,999,999"))})
	aAdd(aTotalizadores, {"Valor Total de Desconto:", AllTrim(TransForm(nGeralDesconto,"@E 999,999,999"))})
	aAdd(aTotalizadores, {"Valor Total Recebido:", AllTrim(TransForm(nGeralRecebido,"@E 999,999,999"))})

	If Len(aDadosFiliais) > 0
		aDadosServicos	:= aDadosFiliais
	EndIf

	// volto a filial para a logada
	cFilAnt := cFilBkp

	If Len(aDadosServicos) > 0
		aRetorno := aDadosServicos
	EndIf

	RestArea(aArea)

Return(aRetorno)

/*/{Protheus.doc} AjustaSX1
Função que cria as perguntas na SX1.	
@type function
@version 1.0  
@author Wellington Gonçalves
@since 24/02/2016
@param cPerg, character, Grupo de Perguntas
/*/
Static Function AjustaSX1(cPerg)

	Local aRegs		:= {}

	Default cPerg	:= ""

	// verifico se o nome do grupo de pergunta foi passado
	if !Empty(cPerg)

		// parametros SX1
		aAdd(aRegs,{cPerg,'01','Periodo De'        ,'','','mv_ch1','D', 08 , 0, 0, 'G','','mv_par01','','','','','',''})
		aAdd(aRegs,{cPerg,'02','Periodo Ate'       ,'','','mv_ch2','D', 08 , 0, 0, 'G','','mv_par02','','','','','',''})
		aAdd(aRegs,{cPerg,'03','Tipo de Servico'    ,'','','mv_ch5','C', 06	, 0, 0, 'G','','mv_par05','','','','','','TIPSRV'})
		aAdd(aRegs,{cPerg,'04','Grupo'        		,'','','mv_ch6','C', 06	, 0, 0, 'G','','mv_par06','','','','','','SBMMRK'})
		aAdd(aRegs,{cPerg,'05','Plano' 	            ,'','','mv_ch8','C', 99 , 0, 0, 'G','','mv_par08','','','','','','UF0MRK'})
		aAdd(aRegs,{cPerg,'06','Filial' 	        ,'','','mv_ch9','C', 99 , 0, 0, 'G','','mv_par09','','','','','','FILSEL'})
		aAdd(aRegs,{cPerg,'07','Filial de Servico'  ,'','','mv_cha','C', 99 , 0, 0, 'G','','mv_par10','','','','','','FILSEL'})
		aAdd(aRegs,{cPerg,'08','Pedido de Venda?'   ,'','','mv_chb','N', 02 , 0, 0, 'N','','mv_par11','Todos','Não Gerado','Gerado','','',''})

		// cria os dados da SX1
		U_CriaSX1( aRegs )

	endIf

Return(Nil)

/*/{Protheus.doc} GeraHTML
Funcao para gerar a Planilha em Excell a partir dos dados
@type function
@version 1.0
@author g.sampaio
@since 17/12/2020
@param aDados, array, Array de Dados do relatorio
/*/
Static Function GeraHTML( oProcess, lEnd, cRelatorio, aTitulo, aDados)

	Local oVirtusRelHTML		As Object

	Default cRelatorio	:= ""
	Default aTitulo		:= {}
	Default aDados		:= {}

	// atribuo valor as variaveis
	oVirtusRelHTML	:= Nil

	// inicio a classe de geracao de planilha
	oVirtusRelHTML := VirtusRelHTML():New()

	// faco a impressao da planilha
	oVirtusRelHTML:Imprimir( @oProcess, @lEnd, cRelatorio, aTitulo, aDados )

Return(Nil)

/*/{Protheus.doc} GeraPlanilha
Funcao para gerar a Planilha em Excell a partir dos dados
@type function
@version 1.0
@author g.sampaio
@since 17/12/2020
@param aDados, array, Array de Dados do relatorio
/*/
Static Function GeraPlanilha( oProcess, lEnd, cRelatorio, aTitulo, aDados)

	Local oVirtusRelPlanilha		As Object

	Default cRelatorio	:= ""
	Default aTitulo		:= {}
	Default aDados		:= {}

	// atribuo valor as variaveis
	oVirtusRelPlanilha	:= Nil

	// inicio a classe de geracao de planilha
	oVirtusRelPlanilha := VirtusRelPlanilha():New()

	// faco a impressao da planilha
	oVirtusRelPlanilha:Imprimir( @oProcess, @lEnd, cRelatorio, aTitulo, aDados )

Return(Nil)
