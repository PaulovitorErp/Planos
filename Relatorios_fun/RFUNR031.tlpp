#include "totvs.ch"
#include "fwprintsetup.ch"
#include "fileio.ch"
#include "rptdef.ch"

/*/{Protheus.doc} RFUNR031
Relatório de Impressão de Controle de Veículos
@type function
@version 1.0
@author g.sampaio
@since 21/10/2022
/*/
User Function RFUNR031()

	Local cRelatorio			:= "Titulos em Aberto - Contrato"
	Local cPerg         		:= "RFUNR031"
	Local cCSSGroup				:= ""
	Local cBotaoCSSCinza  		:= ""
	Local cBotaoCSSAzul   		:= ""
	Local cBotaoCSSVerde  		:= ""
	Local cBotaoCSSLaranja  	:= ""
	Local cBotaoCSSVermelho  	:= ""
	Local oBtnSair      		:= Nil
	Local oBtnPDF      			:= Nil
	Local oBtnHTML     			:= Nil
	Local oBtnPlanilha  		:= Nil
	Local oBtnParametros		:= Nil
	Local oGroupRel     		:= Nil
	Local oSayRel       		:= Nil
	Local oDlgRel       		:= Nil
	Local oFontTitulo   		:= Nil
	Local oCSSButtonVirtus				:= Nil

	// chamo a classe de estilo CSS
	oCSSButtonVirtus := CSSButtonVirtus():New()

	// CSS do objeto group para colorir a borda
	cCSSGroup 			:= oCSSButtonVirtus:CSSGroup()

	// monto o CSS dos botoes
	cBotaoCSSCinza  	:= oCSSButtonVirtus:CSSButtonGray()
	cBotaoCSSAzul   	:= oCSSButtonVirtus:CSSButtonBlue()
	cBotaoCSSVerde  	:= oCSSButtonVirtus:CSSButtonGreen()
	cBotaoCSSLaranja  	:= oCSSButtonVirtus:CSSButtonOrange()
	cBotaoCSSVermelho  	:= oCSSButtonVirtus:CSSButtonRed()

	// crio o grupo de perguntas
	AjustaSX1(cPerg)

	While Pergunte(cPerg,.T.)

		DEFINE MSDIALOG oDlgRel TITLE "Impressão de Relatório - " + cRelatorio FROM 000, 000  TO 200, 455 COLORS 0, 16777215 PIXEL

		@ 003, 003 GROUP oGroupRel TO 095, 227 PROMPT "Impressão de Relatório - " + cRelatorio OF oDlgRel COLOR 0, 16777215 PIXEL
		oGroupRel:oFont := oFontTitulo
		oGroupRel:SetCss(cCSSGroup)

		@ 023, 014 SAY oSayRel PROMPT "Este relatório tem como intuito a impressão dos Beneficiarios por Plano" SIZE 205, 025 OF oDlgRel COLORS 0, 16777215 PIXEL

		// botoes da rotina
		@ 065, 010 BUTTON oBtnParametros    PROMPT "Parametros"     SIZE 040, 015 OF oDlgRel PIXEL ACTION(Pergunte(cPerg,.T.))
		oBtnParametros:SetCss(cBotaoCSSCinza)

		@ 065, 055 BUTTON oBtnHTML      	PROMPT "HTML"  		 	SIZE 040, 015 OF oDlgRel PIXEL ACTION(ValidParam(cRelatorio, 1))
		oBtnHTML:SetCss(cBotaoCSSAzul)

		@ 065, 100 BUTTON oBtnPDF     	 	PROMPT "PDF"        	SIZE 040, 015 OF oDlgRel PIXEL ACTION(ValidParam(cRelatorio, 2))
		oBtnPDF:SetCss(cBotaoCSSLaranja)

		@ 065, 145 BUTTON oBtnPlanilha      PROMPT "Planilha"     	SIZE 040, 015 OF oDlgRel PIXEL ACTION(ValidParam(cRelatorio, 3))
		oBtnPlanilha:SetCss(cBotaoCSSVerde)

		@ 065, 190 BUTTON oBtnSair          PROMPT "Sair"           SIZE 030, 015 OF oDlgRel PIXEL ACTION(oDlgRel:End())
		oBtnSair:SetCss(cBotaoCSSVermelho)

		ACTIVATE MSDIALOG oDlgRel CENTERED

	EndDo

Return(Nil)

/*/{Protheus.doc} ValidParam
Funcao para validar a impressao
@type function
@version 1.0
@author g.sampaio
@since 04/12/2022
@param nTipoImpressao, numeric, tipo de impressao
@return logical, retorno logico para impressao
/*/
Static Function ValidParam(cRelatorio, nTipoImpressao)

	Local aTitulo   := {}
	Local lRetorno 	:= .T.

	Default cRelatorio  := ""
	Default nTipoImpressao	:= 0

	Aadd(aTitulo, "Contrato") 			// [1] Plano
	Aadd(aTitulo, "Data da Venda") 		// [2] Descrição
	Aadd(aTitulo, "Cliente") 		    // [3] Contratos
	Aadd(aTitulo, "Prefixo") 	        // [4] Em Vida
	Aadd(aTitulo, "Titulo") 	        // [5] Falecidos
	Aadd(aTitulo, "Parcela") 	    	// [6] Total
	Aadd(aTitulo, "Tipo") 	            // [7] Em Vida
	Aadd(aTitulo, "Emissao") 	        // [8] Falecidos
	Aadd(aTitulo, "Venc. Original") 	// [9] Total
	Aadd(aTitulo, "Venc. Real") 	    // [10] Total
	Aadd(aTitulo, "Valor Original")   	// [11] Total
	Aadd(aTitulo, "Valor Atual")   	    // [12] Total
	Aadd(aTitulo, "Obitos?") 	    	// [13] Total

	// caso estiver tudo certo com os parametros do relatorio
	if lRetorno

		oProcess := MsNewProcess():New( { | lEnd | ProccesaRelatorio( @oProcess, @lEnd, nTipoImpressao, cRelatorio, aTitulo) }, cRelatorio, "Aguarde, processando os dados do relatorio...", .F. )
		oProcess:Activate()

	else
		MsgAlert("Não existem dados para a impressão do relatório!")
	endIf


Return(lRetorno)

/*/{Protheus.doc} ProccesaRelatorio
Rotina de processamento para a impressao do relatorio
@type function
@version 1.0
@author g.sampaio
@since 25/05/2021
@param oProcess, object, objeto da barra de processamento
@param lEnd, logical, variavel logica para indicar se finaliza ou não a impressão
@param cRelatorio, character, nome do relatorio
@param nTipoImpressao, numeric, tipo de impressao 1=Planilha;2=PDF
@param aTitulo, array, titulos do relatorio
/*/
Static Function ProccesaRelatorio( oProcess, lEnd, nTipoImpressao, cRelatorio, aTitulo )

	Local aDados			As Array
	Local aTotalizadores	As Array
	Local aInformacao		As Array

	Default cRelatorio		:= ""
	Default aTitulo			:= {}

	// atribui valor inicial as variaveis
	aDados 			:= {}
	aInformacao		:= {}
	aTotalizadores	:= {}

	// funcao para gerar os dados
	aInformacao := GeraDados(@oProcess, nTipoImpressao, @aTotalizadores)

	// verifico se tem dados para serem impressos
	if Len(aInformacao) > 0

		// atualizo o objeto de processamento
		oProcess:IncRegua1('Consultando dados para o impressão...')

		// faco tratamento dos dados
		aDados := U_UTrataDados(aTitulo, aInformacao, {3, 4, 5, 6})

		// verifico se tenho dados para a impressao
		if Len(aDados) > 0

			if nTipoImpressao == 1 // HTML

				// atualizo o objeto de processamento
				oProcess:IncRegua1('Impressão em HTML...')

				// atualizo o objeto de processamentp
				oProcess:SetRegua2(Len(aDados))

				GeraHTML( @oProcess, @lEnd, cRelatorio, aTitulo, aDados )

			elseIf nTipoImpressao == 2 // PDF

				// atualizo o objeto de processamento
				oProcess:IncRegua1('Impressão em PDF...')

				// atualizo o objeto de processamentp
				oProcess:SetRegua2(Len(aDados))

				GeraPDF( @oProcess, @lEnd, cRelatorio, aTitulo, aDados, aTotalizadores )

			elseIf nTipoImpressao == 3 // Planilha

				// atualizo o objeto de processamento
				oProcess:IncRegua1('Impressão em Planilha...')

				// atualizo o objeto de processamentp
				oProcess:SetRegua2(Len(aDados))

				GeraPlanilha( @oProcess, @lEnd, cRelatorio, aTitulo, aDados )

			endIf

		endIf

	Else
		MsgAlert("Não existem dados para geração do relatório!")

	endIf

Return(Nil)

/*/{Protheus.doc} GeraPDF
Funcao para a impressao em PDF
@type function
@version 1.0
@author g.sampaio
@since 04/12/2022
@param oProcess, object, param_description
@param lEnd, logical, param_description
@param cRelatorio, character, param_description
@param aDados, array, param_description
@return variant, return_description
/*/
Static Function GeraPDF( oProcess, lEnd, cRelatorio, aTitulo, aDados, aTotalizadores )

	Local aColunas			    As Array
	Local aColTot			    As Array
	Local nMVTamanhoFonte		As Numeric
	Local oGeraPDF				As Object
	Local oPDFPrint				As Object

	Default aDados			:= {}
	Default cRelatorio		:= ""
	Default aTotalizadores	:= {}

	// atribuo valor as variaveis
	oGeraPDF		    := Nil
	oPDFPrint 		    := Nil
	nMVTamanhoFonte	    := SuperGetMV("MV_XFONTV1",,1)
	aColunas	        := {}
	aColTot             := {}

	// atualizo o objeto de processamento
	oProcess:IncRegua2('Iniciando objeto de impressão...')

	// inicio a classe de geracao de planilha
	oGeraPDF := VirtusRelPDF():New(@oPDFPrint, cRelatorio, 2, nMVTamanhoFonte)

	Aadd(aColunas, oGeraPDF:nMargemL) 				// [1] Contrato
	Aadd(aColunas, 100) 			// [2] Data da Venda
	Aadd(aColunas, 250) 			// [3] cliente
	Aadd(aColunas, 1000) 			// [4] prefixo
	Aadd(aColunas, 1100) 			// [5] numero
	Aadd(aColunas, 1275) 			// [6] parcela
	Aadd(aColunas, 1375) 			// [7] tipo
	Aadd(aColunas, 1450) 			// [8] emissao
	Aadd(aColunas, 1600) 			// [9] venc original
	Aadd(aColunas, 1750) 			// [10] venc real
	Aadd(aColunas, 1900) 			// [11] valor original
	Aadd(aColunas, 2050) 			// [12] valor atual
	Aadd(aColunas, 2200) 			// [13] obito

	//------------------------
	// impresso do cabecalho
	//------------------------

	// atualizo o objeto de processamento
	oProcess:IncRegua2('Impressão do cabeçalho...')

	oGeraPDF:ImpCabecalho(@oPDFPrint, cRelatorio)

	// salto a linha
	oGeraPDF:nLinha += 100

	//--------------------------------
	// faco a impressao do relatorio
	//-------------------------------

	if Len(aDados) > 0

		// faco a impressao do conteudo do relatorio
		oGeraPDF:ImpRelatorio( @oProcess, @lEnd, @oPDFPrint, cRelatorio, aTitulo, aColunas, aDados)

		// salto a linha
		oGeraPDF:nLinha += 30

	endIf

	//-----------------------------
	// impressao dos totalizadores
	//-----------------------------

	If Len(aTotalizadores) > 0

		// "Total de Titulares:"
		oPDFPrint:Say( oGeraPDF:nLinha+17, oGeraPDF:nMargemL, aTotalizadores[1, 1], oGeraPDF:oFontNCab )
		oPDFPrint:Say( oGeraPDF:nLinha+17, 300, aTotalizadores[1, 2], oGeraPDF:oFontNCab )

		// "Total de Falecidos:"
		oPDFPrint:Say( oGeraPDF:nLinha+17, aColunas[10], aTotalizadores[2, 1], oGeraPDF:oFontNCab )
		oPDFPrint:Say( oGeraPDF:nLinha+17, aColunas[12], aTotalizadores[2, 2], oGeraPDF:oFontNCab )

	EndIf

	//------------------------
	// impresso do rodape
	//------------------------

	// atualizo o objeto de processamento
	oProcess:IncRegua2('Impressão do rodape...')

	// faco a impressao do rodape
	oGeraPDF:ImpRodape(@oPDFPrint)

	//------------------------
	// gera o relatorio
	//------------------------

	// atualizo o objeto de processamento
	oProcess:IncRegua2('Gerando o PDF do relatorio...')

	// faco a impressao do relatorio
	oGeraPDF:Imprimir(@oPDFPrint)

Return( Nil )

/*/{Protheus.doc} GeraDados
funcao para a geracao de dados
@type function
@version 1.0
@author g.sampaio
@since 28/06/2021
@param oTempTipo, object, objeto do tipo de vendedores
@param oTempDetalhes, object, objeto do tipo de detalhes
@return array, array de dados do retorno
/*/
Static Function GeraDados(oProcess, nTipoImpressao, aTotalizadores)

	Local aArea                 := GetArea()
	Local aAreaSE1              := SE1->(GetArea())
	Local aAux 					:= {}
	Local aRetorno              := {}
	Local aDadosTitulos         := {}
	Local cPlano 				:= ""
	Local dDeEmissao            := StoD("")
	Local dAteEmissao           := StoD("")
	Local dDeVencto             := StoD("")
	Local dAteVencto            := StoD("")
	Local lPlanoEmp		        := SuperGetMV("MV_XPLNEMP", .F., .F.) // habilito o uso do plano empresarial
	Local nObito                := 0
	Local nTipoPlano            := 0
	Local nTotalTitulos         := 0
	Local nValorTotal           := 0
	Local nSaldoTitulo          := 0
	Local nCount                := 0
	Local oVirtusFin            := Nil

	Default nTipoImpressao  := 0
	Default aTotalizadores	:= {}

	// inicio a classe financeira do virtus
	oVirtusFin := VirtusFin():New()

	// atualizo o objeto de processamento
	oProcess:IncRegua1('Consultando Dados...')

	// verifico se o array de parametros tem informacoes
	// preenche os parametros para validacao
	cPlano		    := MV_PAR01
	dDeEmissao      := MV_PAR02
	dAteEmissao     := MV_PAR03
	dDeVencto       := MV_PAR04
	dAteVencto      := MV_PAR05
	nObito          := MV_PAR06

	If lPlanoEmp
		nTipoPlano  := MV_PAR07
	EndIf

	//------------------------------------
	//Executa query para leitura da tabela
	//------------------------------------
	If Select("TMPTIT") > 0
		TMPTIT->( DbCloseArea() )
	EndIf

	cQuery := " SELECT "
	cQuery += "     CONTRATO.UF2_CODIGO COD_CONTRATO, "
	cQuery += "     CONTRATO.UF2_DATA	DATA_VENDA, "
	cQuery += "     CLIENTE.A1_NOME		NOME_CLIENTE, "
	cQuery += "     TITULOS.E1_PREFIXO	PREFIXO, "
	cQuery += "     TITULOS.E1_NUM		TITULO, "
	cQuery += "     TITULOS.E1_PARCELA	PARCELA, "
	cQuery += "     TITULOS.E1_TIPO		TIPO_TITULO, "
	cQuery += "     TITULOS.E1_EMISSAO	EMISSAO, "
	cQuery += "     TITULOS.E1_VENCORI	VENC_ORIGINAL, "
	cQuery += "     TITULOS.E1_VENCREA	VENC_REAL, "
	cQuery += "     TITULOS.E1_VALOR	VALOR, "
	cQuery += "     TITULOS.R_E_C_N_O_	RECSE1, "
	cQuery += "     BENEFICIARIOS.BEN_FALEC OBITOS "
	cQuery += " FROM " + RetSQLName("UF2") + " (NOLOCK) CONTRATO "
	cQuery += " INNER JOIN " + RetSQLName("SA1") + " (NOLOCK) CLIENTE ON CLIENTE.D_E_L_E_T_ = ' ' "
	cQuery += " 	AND CLIENTE.A1_FILIAL = '" + xFilial("SA1") + "' "
	cQuery += "     AND CLIENTE.A1_COD = CONTRATO.UF2_CLIENT "
	cQuery += "     AND CLIENTE.A1_LOJA = CONTRATO.UF2_LOJA "
	cQuery += " INNER JOIN " + RetSQLName("SE1") + " (NOLOCK) TITULOS ON TITULOS.D_E_L_E_T_ = ' ' "
	cQuery += " 	AND TITULOS.E1_FILIAL = '" + xFilial("SE1") + "' "
	cQuery += "     AND TITULOS.E1_XCTRFUN = CONTRATO.UF2_CODIGO "
	cQuery += "     AND TITULOS.E1_SALDO > 0 "
	cQuery += "     AND TITULOS.E1_TIPO NOT IN ('AB-','FB-','FC-','FU-' "
	cQuery += " ,'PR','IR-','IN-','IS-','PI-','CF-','CS-','FE-' "
	cQuery += " ,'IV-','RA','NCC','NDC','RA','TX','IS','IR','CS','CF','PI','AB') "
	cQuery += " INNER JOIN ( "
	cQuery += "                 SELECT "
	cQuery += "                     UF2.UF2_FILIAL FILIAL, "
	cQuery += "                     UF2.UF2_CODIGO CONTRATO, "
	cQuery += "                     SUM(CASE WHEN UF4.UF4_FALECI <> ' 'THEN 1 ELSE 0 END) BEN_FALEC "
	cQuery += "                 FROM " + RetSQLName("UF2") + " (NOLOCK) UF2 "
	cQuery += "                 INNER JOIN " + RetSQLName("UF4") + " (NOLOCK) UF4 ON UF4.D_E_L_E_T_ = ' ' "
	cQuery += " 					AND UF4.UF4_FILIAL = '" + xFilial("UF4") + "' "
	cQuery += "                     AND UF4.UF4_CODIGO = UF2.UF2_CODIGO "
	cQuery += "                 WHERE UF2.D_E_L_E_T_ = ' ' "
	cQuery += " 					AND UF2.UF2_FILIAL = '" + xFilial("UF2") + "' "
	cQuery += "                 GROUP BY UF2.UF2_FILIAL, UF2.UF2_CODIGO "
	cQuery += " ) AS BENEFICIARIOS ON BENEFICIARIOS.FILIAL = CONTRATO.UF2_FILIAL " 
	cQuery += " AND BENEFICIARIOS.CONTRATO = CONTRATO.UF2_CODIGO "

	If nObito == 2
		cQuery += " AND BENEFICIARIOS.BEN_FALEC > 0 "
	ElseIf nObito == 3
		cQuery += " AND BENEFICIARIOS.BEN_FALEC = 0 "
	EndIf

	cQuery += " WHERE CONTRATO.D_E_L_E_T_ = ' ' "
	cQuery += " AND CONTRATO.UF2_FILIAL = '" + xFilial("UF2") + "' "

	If !Empty(dAteEmissao)
		cQuery += " AND TITULOS.E1_EMISSAO BETWEEN '" + DtoS(dDeEmissao) + "' AND '" + DtoS(dAteEmissao) + "' "
	EndIf

	If !Empty(dAteVencto)
		cQuery += " AND TITULOS.E1_VENCREA BETWEEN '" + DtoS(dDeVencto) + "' AND '" + DtoS(dAteVencto) + "' "
	EndIf

	If !Empty(cPlano)
		cQuery += " AND CONTRATO.UF2_PLANO IN " + FormatIN(AllTrim(cPlano), ";")
	EndIf

	If lPlanoEmp
		If nTipoPlano == 2
			cQuery += "  CONTRATO.UF2_PLNEMP = '1' "
		ElseIf nTipoPlano == 3
			cQuery += "  CONTRATO.UF2_PLNEMP = '2' "
		EndIf
	EndIf

	cQuery += " ORDER BY CONTRATO.UF2_DATA, TITULOS.E1_EMISSAO, TITULOS.E1_VENCREA "

	// trato a query
	cQuery := ChangeQuery(cQuery)

	MPSysOpenQuery( cQuery, 'TMPTIT' )

	TMPTIT->(DbGoTop())

	// atualizo o objeto de processamentp
	oProcess:SetRegua2(1000)

	oProcess:IncRegua1('Alimentando os dados do relatorio...')

	While TMPTIT->(!Eof())

		nCount++

		// atualizo o objeto de processamento
		oProcess:IncRegua2('Titulos em aberto encontrados ' + cValToChar(nCount) + '...')

		// zero o saldo do titulo
		nSaldoTitulo := 0

		// verifico se o recno e maior que zero
		If TMPTIT->RECSE1 > 0

			// posiciono no registro do titulo
			DbSelectArea("SE1")
			SE1->(DbGoTo(TMPTIT->RECSE1))

			// pego o saldo do titulo
			nSaldoTitulo := oVirtusFin:RetSaldoTitulo()

			aAux := {}
			aAdd( aAux, TMPTIT->COD_CONTRATO )          // [1] Filial
			aAdd( aAux, Stod(TMPTIT->DATA_VENDA) )      // [2] Apontamento
			aAdd( aAux, TMPTIT->NOME_CLIENTE )          // [3] Apontamento
			aAdd( aAux, TMPTIT->PREFIXO )               // [4] Apontamento
			aAdd( aAux, TMPTIT->TITULO )                // [5] Apontamento
			aAdd( aAux, TMPTIT->PARCELA )               // [6] Apontamento
			aAdd( aAux, TMPTIT->TIPO_TITULO )           // [7] Apontamento
			aAdd( aAux, Stod(TMPTIT->EMISSAO) )         // [8] Apontamento
			aAdd( aAux, Stod(TMPTIT->VENC_ORIGINAL) )   // [9] Apontamento
			aAdd( aAux, Stod(TMPTIT->VENC_REAL) )       // [10] Apontamento
			aAdd( aAux, TMPTIT->VALOR )           // [11] Apontamento
			aAdd( aAux, nSaldoTitulo )                  // [12] Apontamento

			If TMPTIT->OBITOS > 0
				aAdd( aAux, "SIM" )                     // [13] Apontamento
			Else
				aAdd( aAux, "NAO" )                     // [13] Apontamento
			EndIf

			aAdd(aDadosTitulos, aAux)

			If nTipoImpressao == 2 // impressao em PDF

				nTotalTitulos++
				nValorTotal+=nSaldoTitulo

			EndIf

		EndIf

		TMPTIT->(DBSkip())
	endDo

	If nTipoImpressao == 2 // impressao em pdf
		aAdd(aTotalizadores, {"Quantidade:", TransForm(nTotalTitulos,"@E 999,999,999")})
		aAdd(aTotalizadores, {"Valor a Receber:", TransForm(nSaldoTitulo,"@E 999,999,999.99")})
	EndIf

	If Select("TMPTIT") > 0
		TMPTIT->( DbCloseArea() )
	EndIf

	If Len(aDadosTitulos) > 0
		aRetorno := aDadosTitulos
	EndIf

	RestArea(aAreaSE1)
	RestArea(aArea)

Return(aRetorno)

/*/{Protheus.doc} AjustaSX1
Função que cria as perguntas na SX1.	
@type function
@version 1.0  
@author Wellington Gonçalves
@since 24/02/2016
@param cPerg, character, Grupo de Perguntas
/*/
Static Function AjustaSX1(cPerg)

	Local aRegs		    := {}
	Local lPlanoEmp	    := SuperGetMV("MV_XPLNEMP", .F., .F.) // habilito o uso do plano empresarial

	Default cPerg	:= ""

	// verifico se o nome do grupo de pergunta foi passado
	if !Empty(cPerg)

		// parametros SX1
		aAdd(aRegs,{cPerg,'01','Plano' 	            ,'','','mv_ch1','C', 99 , 0, 0, 'G','','mv_par01','','','','','','UF0MRK'})
		aAdd(aRegs,{cPerg,'02','Emissao de'         ,'','','mv_ch2','D', 8  , 0, 0,'G','','mv_par02','','','','','',''})
		aAdd(aRegs,{cPerg,'03','Emissao de'         ,'','','mv_ch3','D', 8  , 0, 0,'G','','mv_par03','','','','','',''})
		aAdd(aRegs,{cPerg,'04','Vencimento de'      ,'','','mv_ch4','D', 8  , 0, 0,'G','','mv_par04','','','','','',''})
		aAdd(aRegs,{cPerg,'05','Vencimento de'      ,'','','mv_ch5','D', 8  , 0, 0,'G','','mv_par05','','','','','',''})
		aAdd(aRegs,{cPerg,'06','Obito?'             ,'','','mv_ch6','N', 1  , 0, 0,'N','','mv_par06','1=Todos','2=Com Obito','3=Sem Obito','','',''})

		If lPlanoEmp
			aAdd(aRegs,{cPerg,'07','Tipo de Plano?'     ,'','','mv_ch7','N', 1  , 0, 0,'N','','mv_par07','1=Todos','2=Empresarial','3=Sem Empresarial','','',''})
		EndIf

		// cria os dados da SX1
		U_CriaSX1( aRegs )

	endIf

Return(Nil)

/*/{Protheus.doc} GeraHTML
Funcao para gerar a Planilha em Excell a partir dos dados
@type function
@version 1.0
@author g.sampaio
@since 17/12/2020
@param aDados, array, Array de Dados do relatorio
/*/
Static Function GeraHTML( oProcess, lEnd, cRelatorio, aTitulo, aDados)

	Local oVirtusRelHTML		As Object

	Default cRelatorio	:= ""
	Default aTitulo		:= {}
	Default aDados		:= {}

	// atribuo valor as variaveis
	oVirtusRelHTML	:= Nil

	// inicio a classe de geracao de planilha
	oVirtusRelHTML := VirtusRelHTML():New()

	// faco a impressao da planilha
	oVirtusRelHTML:Imprimir( @oProcess, @lEnd, cRelatorio, aTitulo, aDados )

Return(Nil)

/*/{Protheus.doc} GeraPlanilha
Funcao para gerar a Planilha em Excell a partir dos dados
@type function
@version 1.0
@author g.sampaio
@since 17/12/2020
@param aDados, array, Array de Dados do relatorio
/*/
Static Function GeraPlanilha( oProcess, lEnd, cRelatorio, aTitulo, aDados)

	Local oVirtusRelPlanilha		As Object

	Default cRelatorio	:= ""
	Default aTitulo		:= {}
	Default aDados		:= {}

	// atribuo valor as variaveis
	oVirtusRelPlanilha	:= Nil

	// inicio a classe de geracao de planilha
	oVirtusRelPlanilha := VirtusRelPlanilha():New()

	// faco a impressao da planilha
	oVirtusRelPlanilha:Imprimir( @oProcess, @lEnd, cRelatorio, aTitulo, aDados )

Return(Nil)
